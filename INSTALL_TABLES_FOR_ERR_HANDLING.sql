CREATE TABLE UTL$ERROR_CODES
(
  ID                               NUMBER(22,0)          NOT NULL,
  SCHEMA_NAME                      VARCHAR2(30 BYTE)     NOT NULL,
  SCOPE_NAME                       VARCHAR2(26 BYTE)     NOT NULL,
  ERR_NUMBER                       NUMBER                NULL,
  ERR_DECLARE                      VARCHAR2(28 BYTE)     NOT NULL,
  ERR_TEXT                         VARCHAR2(2000 BYTE)   NOT NULL,
  LOG_INSTANCE                     CHAR(1 BYTE)          DEFAULT 'N' NULL,
  LOG_CONTEXT                      CHAR(1 BYTE)          DEFAULT 'N' NULL
)
/
CREATE UNIQUE INDEX UTL$ERR_CODES_PK
  ON UTL$ERROR_CODES(ID)
/
CREATE UNIQUE INDEX UTL$ERR_CODES_UK_ERR_N
  ON UTL$ERROR_CODES(
   SCHEMA_NAME,
   SCOPE_NAME,
   ERR_NUMBER
  )
/
CREATE UNIQUE INDEX UTL$ERR_CODES_UK_ERR_SC
  ON UTL$ERROR_CODES(
   SCHEMA_NAME,
   SCOPE_NAME,
   ERR_DECLARE
  )
/
ALTER TABLE UTL$ERROR_CODES ADD ( CONSTRAINT UTL$ERR_CODES_CHK_LOG_I
 CHECK ( LOG_INSTANCE IN ('A','N','Y') )
 ENABLE VALIDATE )
/
ALTER TABLE UTL$ERROR_CODES ADD(
  CONSTRAINT UTL$ERR_CODES_PK PRIMARY KEY(ID)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
    USING INDEX UTL$ERR_CODES_PK
    ENABLE VALIDATE
  )
/
ALTER TABLE UTL$ERROR_CODES ADD(
  CONSTRAINT UTL$ERR_CODES_UK_ERR_N
  UNIQUE(SCHEMA_NAME, SCOPE_NAME, ERR_NUMBER)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
    USING INDEX UTL$ERR_CODES_UK_ERR_N
    ENABLE VALIDATE
  )
/
ALTER TABLE UTL$ERROR_CODES ADD(
  CONSTRAINT UTL$ERR_CODES_UK_ERR_SC
  UNIQUE ( SCHEMA_NAME, SCOPE_NAME, ERR_DECLARE )
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
    USING INDEX UTL$ERR_CODES_UK_ERR_SC
    ENABLE VALIDATE
  )
/

CREATE SEQUENCE UTL$ERROR_CODES_ID_SEQ
/

CREATE OR REPLACE TRIGGER UTL$SET_ERROR_CODES_ID
  BEFORE INSERT ON UTL$ERROR_CODES FOR EACH ROW
BEGIN
    IF(:NEW.ID IS NULL) THEN
        SELECT UTL$ERROR_CODES_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
    IF(:NEW.SCHEMA_NAME IS NULL) THEN
      :NEW.SCHEMA_NAME := UTL$ERROR.get_default_schema_name();
    END IF;
    IF(:NEW.SCOPE_NAME IS NULL) THEN
      :NEW.SCOPE_NAME := UTL$ERROR.get_default_scope_name();
    END IF;
    IF(:NEW.ERR_NUMBER IS NULL) THEN
      :NEW.ERR_NUMBER := UTL$ERROR.get_default_err_number();
    END IF;
END;
/

COMMENT ON TABLE UTL$ERROR_CODES IS 'Table for error handling - package UTL$ERR"'
/

-- Context
CREATE TABLE UTL$ERROR_CONTEXT
(
  ID                               NUMBER(22,0)          NOT NULL,
  ID_ERR_INSTANCE                  NUMBER(22,0)          NOT NULL,
  PAR_NAME                         VARCHAR2(64 BYTE)     NULL,
  PAR_VALUE                        VARCHAR2(4000 BYTE)   NULL
)
/
CREATE INDEX IDX_UTL$ERR_CONTEXT_FK
  ON UTL$ERROR_CONTEXT(ID_ERR_INSTANCE)
/
CREATE UNIQUE INDEX UTL$ERR_CONTEXT_PK
  ON UTL$ERROR_CONTEXT(ID)
/
ALTER TABLE UTL$ERROR_CONTEXT ADD(
  CONSTRAINT UTL$ERR_CONTEXT_PK PRIMARY KEY(ID)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
    USING INDEX UTL$ERR_CONTEXT_PK
    ENABLE VALIDATE
  )
/
ALTER TABLE UTL$ERROR_CONTEXT ADD(
  CONSTRAINT UTL$ERR_CONTEXT_FK FOREIGN KEY(ID_ERR_INSTANCE)
  REFERENCES UTL$ERROR_INSTANCE(ID) ON DELETE CASCADE
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
    ENABLE VALIDATE
  )
/

CREATE SEQUENCE UTL$ERROR_CONTEXT_ID_SEQ
/

CREATE OR REPLACE TRIGGER UTL$SET_ERROR_CONTEXT_ID
  BEFORE INSERT ON UTL$ERROR_CONTEXT FOR EACH ROW
BEGIN
    IF(:NEW.ID IS NULL) THEN
        SELECT UTL$ERROR_CONTEXT_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
END;
/

COMMENT ON TABLE UTL$ERROR_CONTEXT IS 'Data for generating dynamic error handling packages'
/

-- Auditing
CREATE TABLE UTL$ERROR_INSTANCE
(
  ID                               NUMBER(22,0)          NOT NULL,
  ID_ERR_CODE                      NUMBER(22,0)          NOT NULL,
  SYSTEM_ERR_CODE                  NUMBER(22,0)          NULL,
  SYSTEM_ERR_MESSAGE               VARCHAR2(4000 BYTE)   NULL,
  CALLSTACK                        VARCHAR2(4000 BYTE)   NULL,
  ENVIRONMENT                      VARCHAR2(4000 BYTE)   NULL,
  CREATED_ON                       DATE                  NULL,
  CREATED_BY                       VARCHAR2(100 BYTE)    NULL
)
/
CREATE INDEX UTL$ERR_INSTANCE_DATE
  ON UTL$ERROR_INSTANCE(CREATED_ON)
/
CREATE UNIQUE INDEX UTL$ERR_INSTANCE_PK
  ON UTL$ERROR_INSTANCE(ID)
/
ALTER TABLE UTL$ERROR_INSTANCE ADD(
  CONSTRAINT UTL$ERR_INSTANCE_PK
  PRIMARY KEY(ID)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
    USING INDEX UTL$ERR_INSTANCE_PK
    ENABLE VALIDATE
  )
/
ALTER TABLE UTL$ERROR_INSTANCE ADD(
  CONSTRAINT UTL$ERR_INSTANCE_FK
  FOREIGN KEY(ID_ERR_CODE)
  REFERENCES UTL$ERROR_CODES(ID) ON DELETE CASCADE
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
    ENABLE VALIDATE
  )
/

CREATE OR REPLACE TRIGGER UTL$SET_ERROR_INSTANCE_ENV
  BEFORE INSERT
   ON UTL$ERROR_INSTANCE
   REFERENCING OLD AS old NEW AS new
   FOR EACH ROW
BEGIN
   :new.created_on := SYSDATE;
   :new.created_by := SYS_CONTEXT ('USERENV', 'SESSION_USER');

   :new.environment :=
         'instance: '
      || SYS_CONTEXT ('USERENV', 'INSTANCE')
      || CHR (10)
      || 'db_name: '
      || SYS_CONTEXT ('USERENV', 'DB_NAME')
      || CHR (10)
      || 'db_domain: '
      || SYS_CONTEXT ('USERENV', 'DB_DOMAIN')
      || CHR (10)
      || 'session_user: '
      || SYS_CONTEXT ('USERENV', 'SESSION_USER')
      || CHR (10)
      || 'session_id: '
      || SYS_CONTEXT ('USERENV', 'SESSIONID')
      || CHR (10)
      || 'host: '
      || SYS_CONTEXT ('USERENV', 'HOST')
      || CHR (10)
      || 'ip_address: '
      || SYS_CONTEXT ('USERENV', 'IP_ADDRESS')
      || CHR (10)
      || 'os_user: '
      || SYS_CONTEXT ('USERENV', 'OS_USER')
      || CHR (10)
      || 'client_identifier: '
      || SYS_CONTEXT ('USERENV', 'CLIENT_IDENTIFIER')
      || CHR (10)
      || 'client_info: '
      || SYS_CONTEXT ('USERENV', 'CLIENT_INFO')
      || CHR (10)
      || 'bg_job_id: '
      || SYS_CONTEXT ('USERENV', 'BG_JOB_ID')
      || CHR (10)
      || 'fg_job_id: '
      || SYS_CONTEXT ('USERENV', 'FG_JOB_ID')
      || CHR (10);
END;
/

CREATE SEQUENCE UTL$ERROR_INSTANCE_ID_SEQ
/

CREATE OR REPLACE TRIGGER UTL$SET_ERROR_INSTANCE_ID
  BEFORE INSERT ON UTL$ERROR_INSTANCE FOR EACH ROW
BEGIN
    IF(:NEW.ID IS NULL) THEN
        SELECT UTL$ERROR_INSTANCE_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER SET_ERR_INSTANCE_SYSTEM_RR
  BEFORE INSERT OR UPDATE
   ON UTL$ERROR_INSTANCE
   REFERENCING OLD AS old NEW AS new
   FOR EACH ROW
BEGIN

   IF ( :new.system_err_code = '0' ) THEN
       :new.system_err_code := NULL;
       :new.system_err_message := NULL;
   END IF;
END;
/

COMMENT ON TABLE UTL$ERROR_INSTANCE IS 'Auditing error handling'
/